#1-2
class Item:
    def __init__(self, count, max_count=1000, min_count = -1000):
        assert count <= max_count, "wtf, dude"
        self._count = count
        self.max_count=1000
        self.min_count = -1000

    
    def __add__(self, num):
        """ Сложение с числом """
        if self.min_count <= (self._count + num) <= self.max_count:
            return self._count + num
        else:
            return False

    def __iadd__(self, num):
        """ Сложение с числом изменяя его """
        if self.min_count <= (self._count + num) <= self.max_count:
            self._count = self._count+ num
            return self._count
        else:
            return False

    def __sub__(self, num):
        """ Вычитание из числа """
        if self.min_count <= (self._count-num) <= self.max_count:
            return self._count-num
        else:
            return False

    def __isub__(self, num):
        """ Вычитание из числа изменяя его """
        if self.min_count <= (self._count - num) <= self.max_count:
            self._count =self._count- num
            return self._count
        else:
            return False

    def __mul__(self, num):
        """ Умножение на число """
        if self.min_count <= (self._count * num) <= self.max_count:
            return self._count * num
        else:
            return False

    def __imul__(self, num):
        """ Умножение на число изменяя его"""
        if self.min_count <= (self._count * num) <= self.max_count:
            self._count =self._count * num
            return self._count
        else:
            return False

    def __truediv__(self, num):
        """ Деление на число """
        if self.min_count <= (self._count/num) <= self.max_count:
            return self._count/num
        else:
            return False

    def __truediv__(self, num):
        """ Деление на число изменяя его"""
        if self.min_count <= (self._count/num) <= self.max_count:
            self._count =self._count/ num
            return self._count
        else:
            return False

    def __lt__(self, num):
        """ Сравнение меньше """
        return self._count < num

    def __le__(self, num):
        """ Сравнение меньше равно """
        return self._count <= num

    def __gt__(self, num):
        """ Сравнение больше """
        return self._count > num

    def __ge__(self, num):
        """ Сравнение больше равно """
        return self._count >= num

    def __eq__(self, num):
        """ Равенство """
        return self._count == num

    def __ne__(self, num):
        """ Неравенство """
        return self._count != num

    @property
    def count(self):
        return self._count

che2 = Item(40)
print(che2.__isub__(-49))
print(che2.__add__(300))
che2.__iadd__(300)
print(che2.count)
che2.__isub__(300)
print(che2.count)
print(che2.__ge__(40))
print(che2.__eq__(89))


#output
16
18
False
True
False
True
10



#3
class Item:
    def __init__(self, count=3, max_count=16):
        self._count = count
        self._max_count = 16
        
    def update_count(self, val):
        if val <= self._max_count:
            self._count = val
            return True
        else:
            return False
        
    # Свойство объекта. Не принимает параметров кроме self, вызывается без круглых скобок
    # Определяется с помощью декоратора property
    @property
    def count(self):
        return self._count



class Fruit(Item):
    def __init__(self, ripe=True, **kwargs):
        super().__init__(**kwargs)
        self._ripe = ripe

class Vegetable(Item):
    def __init__(self, ripe=True, **kwargs):
        super().__init__(**kwargs)
        self._ripe = ripe

class Meat(Item):
    def __init__(self, roasting=True, **kwargs):
        super().__init__(**kwargs)
        self._roasting = roasting
        
class Food(Item):
    def __init__(self, saturation, **kwargs):
        super().__init__(**kwargs)
        self._saturation = saturation
        
    @property
    def eatable(self):
        return self._saturation > 0

class Apple(Fruit, Food):
    def __init__(self, ripe, count=1, max_count=32, color='green', saturation=10):
        super().__init__(saturation=saturation, ripe=ripe, count=count, max_count=max_count)
        self._color = color
    
    @property
    def color(self):
        return self._color
        
    @property
    def eatable(self):
        return super().eatable and self._ripe
    
    def __call__(self):
        """ Вызов как функции """
        if self.eatable:
            new_count = max(self.count - 1, 0)
            self.update_count(new_count)            
    
    def __str__(self):
        """ Вызов как строки """
        return f'Stack of {self.count} {self.color} apples' 
            
    def __len__(self):
        """ Получение длины объекта """
        return self.count



class Pineapple(Fruit, Food):
    def __init__(self, ripe, count=1, max_count=32, color='Yellow', saturation=10):
        super().__init__(saturation=saturation, ripe=ripe, count=count, max_count=max_count)
        self._color = color
    
    @property
    def color(self):
        return self._color
        
    @property
    def eatable(self):
        return super().eatable and self._ripe
    
    def __call__(self):
        """ Вызов как функции """
        if self.eatable:
            new_count = max(self.count - 1, 0)
            self.update_count(new_count)            
    
    def __str__(self):
        """ Вызов как строки """
        return f'Stack of {self.count} {self.color} pineapples' 
            
    def __len__(self):
        """ Получение длины объекта """
        return self.count




class Potato(Vegetable, Food):
    def __init__(self, ripe, count=1, max_count=32, saturation=10):
        super().__init__(saturation=saturation, ripe=ripe, count=count, max_count=max_count)
        
    @property
    def eatable(self):
        return super().eatable and self._ripe
    
    def __call__(self):
        """ Вызов как функции """
        if self.eatable:
            new_count = max(self.count - 1, 0)
            self.update_count(new_count)            
    
    def __str__(self):
        """ Вызов как строки """
        return f'Stack of {self.count} potatoes' 
            
    def __len__(self):
        """ Получение длины объекта """
        return self.count


class Nugget(Meat, Food):
    def __init__(self, roasting, count=1, max_count=32, saturation=10):
        super().__init__(saturation=saturation, roasting=roasting, count=count, max_count=max_count)
        
    @property
    def eatable(self):
        return super().eatable and self._roasting
    
    def __call__(self):
        """ Вызов как функции """
        if self.eatable:
            new_count = max(self.count - 1, 0)
            self.update_count(new_count)            
    
    def __str__(self):
        """ Вызов как строки """
        return f'Stack of {self.count} nuggets' 
            
    def __len__(self):
        """ Получение длины объекта """
        return self.count

n = Nugget(True, count=8)
print(len(n))
n()
print(len(n))
print(n)

pot = Potato(True, count=14)
print(len(pot))
pot()
print(len(pot))
print(pot)

#output
8
7
Stack of 7 nuggets
14
13
Stack of 13 potatoes




#4
class Inventory():
    def __init__(self, lst1, lst2, lst3):
        self._lst1 = lst1
        self._lst2 = lst2
        self._lst3 = lst3
        
    def __getitem__(self, index):
        """ Получение элемента по индексу """
        if index > len(self):
            raise IndexError(f'Index {index} more then {len(self)}')
        return self._lst1[index], self._lst2[index], self._lst3[index]
        
    def __len__(self):
        return min(len(self._lst1), len(self._lst2))
    
    def __add__(self, idx, val, count):
        self._lst2[idx] = val
        self._lst3[idx] = count
    
    def __sub__(self, idx, count):
        if self._lst3[idx] - count > self._lst3[idx]:
            self._lst3[idx] = self._lst3[idx] - count
        elif self._lst3[idx] - count == 0:
            self._lst3[idx] = self._lst3[idx] - count
            self._lst2[idx] = None
        


mlst = Inventory([1, 2, 3, 4, 5, 6], [None, None, None, None, None, None], [0,0,0,0,0,0])
print(len(mlst))
for i in range (6):
    print(mlst[i])
print('-----')
mlst.__add__(1, 'apple', 3)
for i in range (6):
    print(mlst[i])
print('-----')
mlst.__sub__(1, 3)
for i in range (6):
    print(mlst[i])

#output
6
(1, None, 0)
(2, None, 0)
(3, None, 0)
(4, None, 0)
(5, None, 0)
(6, None, 0)
-----
(1, None, 0)
(2, 'apple', 3)
(3, None, 0)
(4, None, 0)
(5, None, 0)
(6, None, 0)
-----
(1, None, 0)
(2, None, 0)
(3, None, 0)
(4, None, 0)
(5, None, 0)
(6, None, 0)



#5
class Que:
    def __init__(self):
        from queue import Queue
        self._q = Queue()
        self._q.put('zero')
        self._q.put('one')
        self._q.put('two')
        self._q.put('three')
        self._q.put('four')
    @property
    def get_queue(self):
        print('q = ',self._q)
    def add_to_t_end(self, elem):
        self._q.put(elem)
        print('Now q = ',self._q)
    def del_and_print_t_last(self):
        print(self._q.get(0))